Running the chr programs
========================

Start swi-prolog, and load the correct file, e.g.:

[sudoku_chr_ovp].

Then you can invoke the solve predicate on the name of a sudoku,
e.g.:

solve(expert).

There is also a solveall predicate which runs and times the
execution of each sudoku automatically. It only makes sense to run this with sudoku_chr and sudoku_chr_channeling, because sudoku_chr_ovp does not work on every sudoku or is just too slow.

solveall.

For slitherlink it's practically identical:

[slither_chr].

solve(a3).

solveall.

Running the ECLiPSe programs
============================

The sudoku_eclipse_sol.ecl file contains the sudoku solution.
After loading it into ECLiPSe the solve(Name) predicate will calculate the solution to a single puzzle identified by its name, the solveall predicate runs solve on all puzzles, the experiment predicate calculates solutions to all puzzles with different settings, timing them.

The slitherlink solution doesn't run.
